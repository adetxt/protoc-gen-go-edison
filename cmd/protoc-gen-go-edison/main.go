package main

import (
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	contextPackage = protogen.GoImportPath("context")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
	echoPackage    = protogen.GoImportPath("github.com/labstack/echo/v4")
	runtimePackage = protogen.GoImportPath("github.com/grpc-ecosystem/grpc-gateway/v2/runtime")
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".pb.edison.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-go-edison. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, srv := range file.Services {
		g.P("func Register", srv.GoName, "(gs *", grpcPackage.Ident("Server"), ", mux *", runtimePackage.Ident("ServeMux"), ",  h ", srv.GoName, "Server) {")
		g.P("Register", srv.GoName, "Server(gs, h)")
		g.P("Register", srv.GoName, "HandlerServer(", contextPackage.Ident("Background()"), ", mux, h)")
		g.P("}")
	}

	return g
}
