package main

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	edisonPackage = protogen.GoImportPath("github.com/adetxt/edison")
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".pb.edison.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-go-edison. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, srv := range file.Services {
		g.P(fmt.Sprintf("func Register%s(ed *%s, ser %sServer) {", srv.GoName, edisonPackage.Ident("Edison").String(), srv.GoName))
		g.P(fmt.Sprintf("Register%sServer(ed.GRPCServer(), ser)", srv.GoName))
		g.P(fmt.Sprintf("ed.RegisterGRPCGateway(Register%sHandler)", srv.GoName))
		g.P("}")
	}

	return g
}
